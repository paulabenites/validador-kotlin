Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    CAPITALIZE
    COMA
    DCOR
    DLLAVE
    DPAR
    ELSE
    EQUAL
    FIRST
    FOR
    FUN
    ICOR
    IF
    ILLAVE
    IN
    INDENT
    IPAR
    ISEMPTY
    KEYS
    LARGE
    LISTOF
    LRGEQ
    MAPOF
    NEGATION
    NOT
    NOTEQ
    OR
    PAIR
    PRINT
    PRINTLN
    PUNTO
    PUNTOS
    READLINE
    RETURN
    SETOF
    SIZE
    SLICE
    SMALL
    SMLEQ
    STEP
    TAB
    TO
    VALUES
    WHILE
    newline

Grammar

Rule 0     S' -> algoritmo
Rule 1     algoritmo -> iniVariable
Rule 2     algoritmo -> expresion
Rule 3     iniVariable -> variable ID tipoDeDato
Rule 4     iniVariable -> variable ID EQUALS valor
Rule 5     iniVariable -> variable ID EQUALS valorBoolean
Rule 6     variable -> VAR
Rule 7     variable -> VAL
Rule 8     tipoDeDato -> DOSPUNTOS INT EQUALS ENTERO
Rule 9     tipoDeDato -> DOSPUNTOS DOUBLE EQUALS DECIMAL
Rule 10    tipoDeDato -> DOSPUNTOS STRING EQUALS CADENA_DE_CARACTERES
Rule 11    tipoDeDato -> DOSPUNTOS BOOLEAN EQUALS valorBoolean
Rule 12    expresion -> valor
Rule 13    expresion -> valor operadorMat expresion
Rule 14    operadorMat -> PLUS
Rule 15    operadorMat -> MINUS
Rule 16    operadorMat -> TIMES
Rule 17    operadorMat -> DIVIDE
Rule 18    valor -> ENTERO
Rule 19    valor -> DECIMAL
Rule 20    valor -> CADENA_DE_CARACTERES
Rule 21    valorBoolean -> TRUE
Rule 22    valorBoolean -> FALSE

Terminals, with rules where they appear

AND                  : 
BOOLEAN              : 11
CADENA_DE_CARACTERES : 10 20
CAPITALIZE           : 
COMA                 : 
DCOR                 : 
DECIMAL              : 9 19
DIVIDE               : 17
DLLAVE               : 
DOSPUNTOS            : 8 9 10 11
DOUBLE               : 9
DPAR                 : 
ELSE                 : 
ENTERO               : 8 18
EQUAL                : 
EQUALS               : 4 5 8 9 10 11
FALSE                : 22
FIRST                : 
FOR                  : 
FUN                  : 
ICOR                 : 
ID                   : 3 4 5
IF                   : 
ILLAVE               : 
IN                   : 
INDENT               : 
INT                  : 8
IPAR                 : 
ISEMPTY              : 
KEYS                 : 
LARGE                : 
LISTOF               : 
LRGEQ                : 
MAPOF                : 
MINUS                : 15
NEGATION             : 
NOT                  : 
NOTEQ                : 
OR                   : 
PAIR                 : 
PLUS                 : 14
PRINT                : 
PRINTLN              : 
PUNTO                : 
PUNTOS               : 
READLINE             : 
RETURN               : 
SETOF                : 
SIZE                 : 
SLICE                : 
SMALL                : 
SMLEQ                : 
STEP                 : 
STRING               : 10
TAB                  : 
TIMES                : 16
TO                   : 
TRUE                 : 21
VAL                  : 7
VALUES               : 
VAR                  : 6
WHILE                : 
error                : 
newline              : 

Nonterminals, with rules where they appear

algoritmo            : 0
expresion            : 2 13
iniVariable          : 1
operadorMat          : 13
tipoDeDato           : 3
valor                : 4 12 13
valorBoolean         : 5 11
variable             : 3 4 5

Parsing method: LALR

state 0

    (0) S' -> . algoritmo
    (1) algoritmo -> . iniVariable
    (2) algoritmo -> . expresion
    (3) iniVariable -> . variable ID tipoDeDato
    (4) iniVariable -> . variable ID EQUALS valor
    (5) iniVariable -> . variable ID EQUALS valorBoolean
    (12) expresion -> . valor
    (13) expresion -> . valor operadorMat expresion
    (6) variable -> . VAR
    (7) variable -> . VAL
    (18) valor -> . ENTERO
    (19) valor -> . DECIMAL
    (20) valor -> . CADENA_DE_CARACTERES

    VAR             shift and go to state 6
    VAL             shift and go to state 7
    ENTERO          shift and go to state 8
    DECIMAL         shift and go to state 9
    CADENA_DE_CARACTERES shift and go to state 10

    algoritmo                      shift and go to state 1
    iniVariable                    shift and go to state 2
    expresion                      shift and go to state 3
    variable                       shift and go to state 4
    valor                          shift and go to state 5

state 1

    (0) S' -> algoritmo .



state 2

    (1) algoritmo -> iniVariable .

    $end            reduce using rule 1 (algoritmo -> iniVariable .)


state 3

    (2) algoritmo -> expresion .

    $end            reduce using rule 2 (algoritmo -> expresion .)


state 4

    (3) iniVariable -> variable . ID tipoDeDato
    (4) iniVariable -> variable . ID EQUALS valor
    (5) iniVariable -> variable . ID EQUALS valorBoolean

    ID              shift and go to state 11


state 5

    (12) expresion -> valor .
    (13) expresion -> valor . operadorMat expresion
    (14) operadorMat -> . PLUS
    (15) operadorMat -> . MINUS
    (16) operadorMat -> . TIMES
    (17) operadorMat -> . DIVIDE

    $end            reduce using rule 12 (expresion -> valor .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16

    operadorMat                    shift and go to state 12

state 6

    (6) variable -> VAR .

    ID              reduce using rule 6 (variable -> VAR .)


state 7

    (7) variable -> VAL .

    ID              reduce using rule 7 (variable -> VAL .)


state 8

    (18) valor -> ENTERO .

    PLUS            reduce using rule 18 (valor -> ENTERO .)
    MINUS           reduce using rule 18 (valor -> ENTERO .)
    TIMES           reduce using rule 18 (valor -> ENTERO .)
    DIVIDE          reduce using rule 18 (valor -> ENTERO .)
    $end            reduce using rule 18 (valor -> ENTERO .)


state 9

    (19) valor -> DECIMAL .

    PLUS            reduce using rule 19 (valor -> DECIMAL .)
    MINUS           reduce using rule 19 (valor -> DECIMAL .)
    TIMES           reduce using rule 19 (valor -> DECIMAL .)
    DIVIDE          reduce using rule 19 (valor -> DECIMAL .)
    $end            reduce using rule 19 (valor -> DECIMAL .)


state 10

    (20) valor -> CADENA_DE_CARACTERES .

    PLUS            reduce using rule 20 (valor -> CADENA_DE_CARACTERES .)
    MINUS           reduce using rule 20 (valor -> CADENA_DE_CARACTERES .)
    TIMES           reduce using rule 20 (valor -> CADENA_DE_CARACTERES .)
    DIVIDE          reduce using rule 20 (valor -> CADENA_DE_CARACTERES .)
    $end            reduce using rule 20 (valor -> CADENA_DE_CARACTERES .)


state 11

    (3) iniVariable -> variable ID . tipoDeDato
    (4) iniVariable -> variable ID . EQUALS valor
    (5) iniVariable -> variable ID . EQUALS valorBoolean
    (8) tipoDeDato -> . DOSPUNTOS INT EQUALS ENTERO
    (9) tipoDeDato -> . DOSPUNTOS DOUBLE EQUALS DECIMAL
    (10) tipoDeDato -> . DOSPUNTOS STRING EQUALS CADENA_DE_CARACTERES
    (11) tipoDeDato -> . DOSPUNTOS BOOLEAN EQUALS valorBoolean

    EQUALS          shift and go to state 18
    DOSPUNTOS       shift and go to state 19

    tipoDeDato                     shift and go to state 17

state 12

    (13) expresion -> valor operadorMat . expresion
    (12) expresion -> . valor
    (13) expresion -> . valor operadorMat expresion
    (18) valor -> . ENTERO
    (19) valor -> . DECIMAL
    (20) valor -> . CADENA_DE_CARACTERES

    ENTERO          shift and go to state 8
    DECIMAL         shift and go to state 9
    CADENA_DE_CARACTERES shift and go to state 10

    valor                          shift and go to state 5
    expresion                      shift and go to state 20

state 13

    (14) operadorMat -> PLUS .

    ENTERO          reduce using rule 14 (operadorMat -> PLUS .)
    DECIMAL         reduce using rule 14 (operadorMat -> PLUS .)
    CADENA_DE_CARACTERES reduce using rule 14 (operadorMat -> PLUS .)


state 14

    (15) operadorMat -> MINUS .

    ENTERO          reduce using rule 15 (operadorMat -> MINUS .)
    DECIMAL         reduce using rule 15 (operadorMat -> MINUS .)
    CADENA_DE_CARACTERES reduce using rule 15 (operadorMat -> MINUS .)


state 15

    (16) operadorMat -> TIMES .

    ENTERO          reduce using rule 16 (operadorMat -> TIMES .)
    DECIMAL         reduce using rule 16 (operadorMat -> TIMES .)
    CADENA_DE_CARACTERES reduce using rule 16 (operadorMat -> TIMES .)


state 16

    (17) operadorMat -> DIVIDE .

    ENTERO          reduce using rule 17 (operadorMat -> DIVIDE .)
    DECIMAL         reduce using rule 17 (operadorMat -> DIVIDE .)
    CADENA_DE_CARACTERES reduce using rule 17 (operadorMat -> DIVIDE .)


state 17

    (3) iniVariable -> variable ID tipoDeDato .

    $end            reduce using rule 3 (iniVariable -> variable ID tipoDeDato .)


state 18

    (4) iniVariable -> variable ID EQUALS . valor
    (5) iniVariable -> variable ID EQUALS . valorBoolean
    (18) valor -> . ENTERO
    (19) valor -> . DECIMAL
    (20) valor -> . CADENA_DE_CARACTERES
    (21) valorBoolean -> . TRUE
    (22) valorBoolean -> . FALSE

    ENTERO          shift and go to state 8
    DECIMAL         shift and go to state 9
    CADENA_DE_CARACTERES shift and go to state 10
    TRUE            shift and go to state 23
    FALSE           shift and go to state 24

    valor                          shift and go to state 21
    valorBoolean                   shift and go to state 22

state 19

    (8) tipoDeDato -> DOSPUNTOS . INT EQUALS ENTERO
    (9) tipoDeDato -> DOSPUNTOS . DOUBLE EQUALS DECIMAL
    (10) tipoDeDato -> DOSPUNTOS . STRING EQUALS CADENA_DE_CARACTERES
    (11) tipoDeDato -> DOSPUNTOS . BOOLEAN EQUALS valorBoolean

    INT             shift and go to state 25
    DOUBLE          shift and go to state 26
    STRING          shift and go to state 27
    BOOLEAN         shift and go to state 28


state 20

    (13) expresion -> valor operadorMat expresion .

    $end            reduce using rule 13 (expresion -> valor operadorMat expresion .)


state 21

    (4) iniVariable -> variable ID EQUALS valor .

    $end            reduce using rule 4 (iniVariable -> variable ID EQUALS valor .)


state 22

    (5) iniVariable -> variable ID EQUALS valorBoolean .

    $end            reduce using rule 5 (iniVariable -> variable ID EQUALS valorBoolean .)


state 23

    (21) valorBoolean -> TRUE .

    $end            reduce using rule 21 (valorBoolean -> TRUE .)


state 24

    (22) valorBoolean -> FALSE .

    $end            reduce using rule 22 (valorBoolean -> FALSE .)


state 25

    (8) tipoDeDato -> DOSPUNTOS INT . EQUALS ENTERO

    EQUALS          shift and go to state 29


state 26

    (9) tipoDeDato -> DOSPUNTOS DOUBLE . EQUALS DECIMAL

    EQUALS          shift and go to state 30


state 27

    (10) tipoDeDato -> DOSPUNTOS STRING . EQUALS CADENA_DE_CARACTERES

    EQUALS          shift and go to state 31


state 28

    (11) tipoDeDato -> DOSPUNTOS BOOLEAN . EQUALS valorBoolean

    EQUALS          shift and go to state 32


state 29

    (8) tipoDeDato -> DOSPUNTOS INT EQUALS . ENTERO

    ENTERO          shift and go to state 33


state 30

    (9) tipoDeDato -> DOSPUNTOS DOUBLE EQUALS . DECIMAL

    DECIMAL         shift and go to state 34


state 31

    (10) tipoDeDato -> DOSPUNTOS STRING EQUALS . CADENA_DE_CARACTERES

    CADENA_DE_CARACTERES shift and go to state 35


state 32

    (11) tipoDeDato -> DOSPUNTOS BOOLEAN EQUALS . valorBoolean
    (21) valorBoolean -> . TRUE
    (22) valorBoolean -> . FALSE

    TRUE            shift and go to state 23
    FALSE           shift and go to state 24

    valorBoolean                   shift and go to state 36

state 33

    (8) tipoDeDato -> DOSPUNTOS INT EQUALS ENTERO .

    $end            reduce using rule 8 (tipoDeDato -> DOSPUNTOS INT EQUALS ENTERO .)


state 34

    (9) tipoDeDato -> DOSPUNTOS DOUBLE EQUALS DECIMAL .

    $end            reduce using rule 9 (tipoDeDato -> DOSPUNTOS DOUBLE EQUALS DECIMAL .)


state 35

    (10) tipoDeDato -> DOSPUNTOS STRING EQUALS CADENA_DE_CARACTERES .

    $end            reduce using rule 10 (tipoDeDato -> DOSPUNTOS STRING EQUALS CADENA_DE_CARACTERES .)


state 36

    (11) tipoDeDato -> DOSPUNTOS BOOLEAN EQUALS valorBoolean .

    $end            reduce using rule 11 (tipoDeDato -> DOSPUNTOS BOOLEAN EQUALS valorBoolean .)

